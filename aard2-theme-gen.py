#!/usr/bin/env python
"""
    Convert VSCode's .json themes to Aard2's .css

    Author: Alexander Rusakevich
    2023
"""

__author__ = "Alexander Rusakevich"
__version_arr__ = (0, 0, 5)
__version__ = "v" + ".".join([str(i) for i in __version_arr__])

import os
import json
import datetime
import glob
import colorama
import re
import traceback
import pathlib
from colorama import Fore

colors = {
    "bg_color": "black",
    "font_color": "#a0a0a0",

    "a_color": "#a3964e",
    "a_color_active": "#faa700",
    "a_color_visited": "#735a0a",

    "tr_color": "orangered",
    "pos_color": "green",
    "co_color": "#888888"
}

CSS_BASE = open("base_theme.scss", "r", encoding="utf8").read()


def fallback_get(dic, *args):
    for arg in args:
        if arg in dic:
            return dic[arg]

    return None


def convert_to_css(file_name: str) -> None:
    theme_file_stem = pathlib.Path(file_name).stem
    css_theme_path = os.path.splitext(file_name)[0] + ".aard2.css"

    style_file = None
    with open(file_name, "r", encoding="utf8") as f:
        style_file = json.load(f)

    metainf = json.load(open(os.path.join(
        ".", "themes", "__metainf.json"), "r", encoding="utf8"))[theme_file_stem]

    theme_name = style_file.get("name", theme_file_stem)
    theme_type = style_file.get("type", "unknown")

    if theme_type == "unknown":
        if "light" in theme_file_stem.lower() or "light" in theme_name.lower():
            theme_type = "light"
        elif "dark" in theme_file_stem.lower() or "dark" in theme_name.lower():
            theme_type = "dark"

    CSS_HEAD = f"""
/* 
 * Generated by Aard2 theme generator {__version__} (created by {__author__})
 * {str(datetime.datetime.utcnow())}
 *
 * Theme: {theme_name}
 * Type: {theme_type}
 *
 * Original author of the theme: {metainf["author"]}
 * Repo: {metainf["repo"]}
 * 
 * Special thanks to @itkach for his Aard2!
 */
""".strip() + (2*"\n")

    file_colors = style_file["colors"]

    colors["bg_color"] = file_colors["editor.background"]
    colors["font_color"] = file_colors["editor.foreground"]

    colors["a_color"] = fallback_get(
        file_colors, "textLink.foreground", "inputValidation.infoBorder", "terminal.ansiCyan")
    colors["a_color_active"] = fallback_get(
        file_colors, "textLink.activeForeground", "inputValidation.infoBackground", "terminal.ansiBlue")
    colors["a_color_visited"] = fallback_get(
        file_colors, "inputValidation.errorBackground", "terminal.ansiBrightMagenta")

    colors["tr_color"] = file_colors["terminal.ansiYellow"]
    colors["pos_color"] = file_colors["terminal.ansiGreen"]
    colors["co_color"] = file_colors["terminal.ansiBrightBlack"]

    with open(css_theme_path, "w", encoding="utf8") as f:
        f.write(CSS_HEAD)

        css_theme_code = CSS_BASE

        for k, v in colors.items():
            css_theme_code = re.sub(fr"\${k}(?=\W)", v, css_theme_code)

        f.write(css_theme_code)


def main():
    colorama.init(autoreset=True)

    json_files = [f for f in glob.glob(os.path.join(".", "themes", "*.json"))
                  if not pathlib.Path(f).stem.startswith("__")]
    for json_file in json_files:
        print(f"Generating the theme for '{json_file}'...", end=" ")

        try:
            convert_to_css(json_file)
        except:
            print(Fore.LIGHTRED_EX + "Fail")
            print(traceback.format_exc())
        else:
            print(Fore.LIGHTGREEN_EX + "OK")


if __name__ == "__main__":
    main()
